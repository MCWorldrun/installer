plugins {
	id 'java'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "de.undercouch.download" version "4.1.2"
	id "me.modmuss50.remotesign" version "0.1.0"
	id 'net.researchgate.release' version '3.0.2'
}

sourceCompatibility = 1.8
version = '1.0.0'
archivesBaseName = "installer"

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
    mavenCentral()
}

def nativeLibVersion = "0.1.3"
def nativeLibDistributions = [
		"windows-ARM64", "windows-Win32", "windows-x64", "macos-x86_64_arm64"
]

dependencies {
	implementation ('org.sharegov:mjson:1.4.1') {
		transitive false
	}
	nativeLibDistributions.each {
		implementation "net.fabricmc.fabric-installer-native-lib:${it}:${nativeLibVersion}"
	}

	testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

shadowJar {
	manifest {
		attributes 'Implementation-Title': 'GamersEditionInstaller',
				'Implementation-Version': project.version,
				'Main-Class': 'tv.banko.gamersedition.installer.Main'
	}

	minimize()
	archiveClassifier.set(null)
	exclude('icon.ico')
}

def bootstrapVersion = "0.5.1"
def bootstrapArch = "i686"

task downloadBootstrap(type: Download) {
	src "https://maven.fabricmc.net/net/fabricmc/fabric-installer-native-bootstrap/windows-${bootstrapArch}/${bootstrapVersion}/windows-${bootstrapArch}-${bootstrapVersion}.exe"
	dest project.buildDir
}

task nativeExe(dependsOn: [shadowJar, downloadBootstrap], type: FileOutput) {
	output = file("${projectDir}/build/libs/${archivesBaseName}-${project.version}.exe")
	outputs.upToDateWhen { false }

	doFirst {
		output.delete()
	}

	doLast {
		output.createNewFile()
		output.setBytes downloadBootstrap.outputFiles.first().readBytes()

		if (ENV.SIGNING_SERVER) {
			output.append signShadowJar.archiveFile.get().getAsFile().readBytes()
		} else {
			output.append shadowJar.archiveFile.get().getAsFile().readBytes()
		}
	}
}
build.dependsOn nativeExe

jar {
	enabled = false
}

if (ENV.SIGNING_SERVER) {
	remoteSign {
		requestUrl ENV.SIGNING_SERVER
		pgpAuthKey ENV.SIGNING_PGP_KEY
		jarAuthKey ENV.SIGNING_JAR_KEY

		sign (shadowJar)

		afterEvaluate {
			sign publishing.publications.maven
		}
	}

	nativeExe.dependsOn signShadowJar
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			if (ENV.SIGNING_SERVER) {
				artifact (signShadowJar) {
					classifier null
				}
			} else {
				artifact (shadowJar) {
					classifier null
				}
			}

			artifact nativeExe.output
		}
	}
	repositories {
		maven {
			if (ENV.MAVEN_URL) {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

release {
	failOnCommitNeeded = true
	failOnPublishNeeded = true
	failOnSnapshotDependencies = true
	failOnUnversionedFiles = true
	failOnUpdateNeeded = true
	preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
	tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
	newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
	tagTemplate = version
	snapshotSuffix = '-SNAPSHOT'
	buildTasks = []

	git {
		requireBranch.set('main')
	}
}

class FileOutput extends DefaultTask {
	@OutputFile
	File output
}
